void verticalOrderTraversal(Node *root, map<int,vector<int>> &m, int &hd){
        
        if(root==NULL){
            return;
        }
        
        queue<pair<Node*,int>> q;
        q.push(make_pair(root,hd));
        
        while(!q.empty()){
            
            pair<Node*,int> temp = q.front();
            q.pop();
            Node *n = temp.first;
            int hd=temp.second;
            
            m[hd].push_back(n->data);
            
            if(n->left!=NULL){
                q.push(make_pair(n->left,hd-1));
            }
            if(n->right!=NULL){
                q.push(make_pair(n->right,hd+1));
            }
        }
}
    
//Function to return a list containing the bottom view of the given tree.
vector <int> bottomView(Node *root)
{
   // Your Code Here
        vector<int> v;
        if(root==NULL){
            return v;
        }
        
        map<int,vector<int>> m;
        int hd=0;
        
        verticalOrderTraversal(root,m,hd);
        
        map<int,vector<int>> :: iterator it;
        for(it=m.begin();it!=m.end();it++){
            for(int i=0;i<it->second.size();i++){
                if(i==it->second.size()-1){
                   v.push_back(it->second[i]); 
                }
            }
        }
        return v;
}